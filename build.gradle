import de.undercouch.gradle.tasks.download.Download

buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
		wiremockVersion = '2.14.0'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'de.undercouch:gradle-download-task:3.3.0'
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: "de.undercouch.download"

group = 'com.wilsonfranca'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
}


dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Edgware.SR2'
    }
}

configurations {
    wiremock
	behaviorTestRuntime {
		extendsFrom testRuntime
	}

	behaviorTestCompile {
		extendsFrom testCompile
	}

}

sourceSets {

	cucumber {
		java {
			srcDir 'src/cucumber/java'
			compileClasspath += main.output + test.output + main.compileClasspath + test.compileClasspath
			runtimeClasspath += main.output + test.runtimeClasspath
		}
		resources {
			srcDir 'src/cucumber/resources'
		}
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4')
    compile('org.webjars:bootstrap:4.0.0')
    compile('org.webjars:bootstrap-material-design:4.+')
    compile 'org.webjars:material-design-icons:3.0.1'
	compile 'org.webjars:bootstrap-datepicker:1.7.1'
	compile 'org.webjars.bower:snackbarjs:1.1.0'
	compile 'org.projectlombok:lombok:1.16.8'

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.1')
	testCompile('io.cucumber:cucumber-spring:2.+')
	testCompile('io.cucumber:cucumber-java8:2.+')
	testCompile('io.cucumber:cucumber-junit:2.+')
	testCompile('org.seleniumhq.selenium:selenium-server:3.+')
	testCompile('org.seleniumhq.selenium:selenium-java:3.+')
	testCompile('org.seleniumhq.selenium:selenium-remote-driver:3.+')
	testCompile("com.github.tomakehurst:wiremock:${wiremockVersion}")
	testCompile('org.springframework.cloud:spring-cloud-starter-contract-stub-runner')

    runtime("org.codehaus.groovy:groovy:2.4.8")

    //wiremocks local
    wiremock("com.github.tomakehurst:wiremock-standalone:$wiremockVersion")
}


task copyWiremockStandalone(type: Copy) {
    from configurations.wiremock
    into "$buildDir/wiremock"
}

task startWiremock(type: JavaExec) {
    def rootDir = sourceSets.test.resources.srcDirs.find { it != null }
    def file = "$buildDir/wiremock/wiremock-standalone-$wiremockVersion"+'.jar'
    main = "-jar"
    args = [file, "--root-dir", "$rootDir", "--port", "9090", "fork", true]
}

task cucumber() {
	dependsOn assemble, compileTestJava
	doLast {
		javaexec {
			main = "cucumber.api.cli.Main"
			classpath = configurations.behaviorTestRuntime + sourceSets.main.output + sourceSets.test.output
			args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/cucumber/resources']
		}
	}
}

task downloadChromeDriver(type: Download) {
	src 'https://chromedriver.storage.googleapis.com/2.35/chromedriver_linux64.zip'
	def destDirectory = new File("$buildDir/chrome-driver/")
	if(!destDirectory.exists()) {
		destDirectory.mkdir()
	}
	dest "$buildDir/chrome-driver"
	overwrite false
	onlyIfModified true
	acceptAnyCertificate true

}

task chromeDriver(type: Copy, dependsOn: downloadChromeDriver) {
	def zipFile = file("$buildDir/chrome-driver/chromedriver_linux64.zip")
	def outputDir = file("$buildDir/chrome-driver/")
	from zipTree(zipFile)
	into outputDir
}

task behaviorTest(type: Test, dependsOn: chromeDriver) {
	testClassesDirs = sourceSets.cucumber.output
	classpath = sourceSets.cucumber.runtimeClasspath
	outputs.upToDateWhen { false }
}

startWiremock.dependsOn copyWiremockStandalone


bootRun.systemProperties = System.properties
